# Multistage Dockerfile for the backend servers
# syntax=docker/dockerfile:1

# ----- Stage 1 -----
# Build the Go project using the official lightweight Go base-image
# Alias as builder
FROM golang:1.22.2-alpine AS builder

# Specify the directory for building the Go app
WORKDIR /app

# Download Go module definition to download dependencies first
COPY go.mod ./

# Download Go dependencies into the module cache
RUN go mod download

# Copy application from root into container
COPY . .

# Build binary named 'demo-server'
# Compile the server.go logic
RUN go build -o demo-server ./demo/server


# ----- Stage 2 -----
# Base image - lightweight linux alpine
FROM alpine:latest

# Specify the directory inside the runtime environment
WORKDIR /usr/local/bin

# Copy the comiled binary from stage 1 using the alias
COPY --from=builder /app/demo-server .

# The docker container listens to the exposed port
EXPOSE 9090

# Setting entrypoint to run the binary
ENTRYPOINT [ "./demo-server" ]
