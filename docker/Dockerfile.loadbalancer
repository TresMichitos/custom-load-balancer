# Multistage Dockerfile for the loadbalancer container
# syntax=docker/dockerfile:1

# ----- Stage 1 -----
# Build the Go project using the official lightweight Go base-image
# Alias as builder
FROM golang:1.23-alpine AS builder

# Specify the directory for building the Go app
WORKDIR /app

# Download Go module definition to download dependencies first
COPY go.mod ./

# Download Go dependencies into the module cache
RUN go mod download

# Copy application from root into container
COPY . .

# Build binary named 'custom-load-balancer'
# Compile the main.go logic
RUN go build -o custom-load-balancer ./cmd/custom-load-balancer/main.go

# ----- Stage 2 -----
# Base image - lightweight linux alpine
FROM alpine:latest

# Specify the directory inside the runtime environment
WORKDIR /usr/local/bin

# Copy the comiled binary from stage 1 using the alias
COPY --from=builder /app/custom-load-balancer .

# The docker container listens to the exposed port
EXPOSE 8080

# Setting entrypoint to run the binary
ENTRYPOINT [ "./custom-load-balancer" ]

# Defaults
CMD []